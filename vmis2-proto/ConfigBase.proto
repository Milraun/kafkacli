syntax = "proto3";
package eu.vmis_ehe.vmis2.configservice;

option java_multiple_files = true;
option csharp_namespace = "eu.vmis_ehe.vmis2.configservice";

// Config item type, used for both logical ('Cfg-') and electrical ('Tls-') items
enum ConfigItemType {
    UNKNOWN_TYPE = 0;
    
    VRZ = 1;
    UVRZ = 2;
    UZ = 3;
    IB = 4;
    RST = 5;
    KRI = 6;
    CABLE = 7;
    DEVICE = 8;

    MQ = 10;
    AQ = 11;
    VDE_SENSOR = 12;
    UDE_SENSOR = 13;
    VLT_SENSOR = 14;
    WZG = 15;
    AXL_SENSOR = 16;
}

message CfgIds {                    // list of ids (used for oneofs)
    repeated string ids = 1;
}

message CfgItemRef {                // one config item reference (id and type)
    ConfigItemType type = 1;
    string id = 2;
}

message CfgItemRefs {               // list of config item references (used for oneofs)
    repeated CfgItemRef refs = 1;
}

// stuff used to describe where a sensor or WZG is positioned relative to a road's lanes
message LanePos {

    enum LaneType {
        UNKNOWN = 0;
        MAIN = 1;                   // F, 'main' lane: use LanePos' index to describe which one, where '0' would be rightmost
                                    //      -1: All (e.g. for info boards above all lanes)
        BETWEEN = 2;                // 'between' two lanes, where index = 0 would be 'between right shoulder and first main lane'
        EMERGENCY = 3;              // PS, rightmost breakdown/emergency lane
        EDGE = 4;                   // RS, rightmost area (where PS would be, but too small)
        RIGHTSHOULDER = 5;          // AS, anything right of main/emergency lanes
        LEFTSHOULDER = 6;           // IS, anything left of main lanes
        ENTRY = 7;                  // E
        EXIT = 8;                   // A
        MERGE = 9;                  // V
        CUTOUT = 10;                // HB
        PARKING = 11;               // KPP
    }

    string description = 1;         // short, user readable description, like F1 (for MAIN/0, or F3/F2 for BETWEEN/2)
    LaneType lane_type = 2;         // lane type
    int32 h_index = 3;              // index, counting from right: 0 = rightmost lane, or between right shoulder and first main lane
    int32 h_span = 4;               // used where items span several lanes (usually 1)
    int32 v_index = 5;              // used when there's more than one element at a specified position, e.g. when stacking
                                    //   signs 'between' lanes, counting from bottom up
}

enum Heading {                      // directional reference according to road offset
    BOTH = 0;                       // independent of direction, or affects both directions
    ASCENDING = 1;                  // in ascending offset direction
    DESCENDING = 2;                 // in descending offset direction
    LEFT = 3;                       // perpendicular to ascending, left
    RIGHT = 4;                      // perpendicular to ascending, right
}


message Location {
    double latitude = 1;            // WGS84 coordinate
    double longitude = 2;
    string road_id = 3;             // ASFINAG-Id
}

