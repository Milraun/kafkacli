syntax = "proto3";

package eu.vmis_ehe.vmis2.receiving.processing.data.prepara;

import "MeasurementReplacementData.proto";
import "google/protobuf/timestamp.proto";
import "heuboe/protobuf/InterfaceVersion.proto";

option java_multiple_files = true;
option java_outer_classname = "MeasurementPreparationDataProto";
option (.heuboe.protobuf.interface_version) = "0.3.2";

/* Short-term measurement preparation to analyze data of lane. (output) */
message AnalyticalDataLane {
    string id = 1;                                  // Identification of lane
    google.protobuf.Timestamp processing_time = 2;  /* Processing time - The point in time when the event or data
                                                     * record happens to be processed by the stream processing 
                                                     * application, i.e. when the record is being consumed. The 
                                                     * processing time may be milliseconds, hours, or days etc. later
                                                     * than the original event time This is something like setting a 
                                                     * system_time from the database in old.
                                                     * specification: 'systemzeit' */
    google.protobuf.Timestamp event_time = 3;       /* The point in time when an event or data record occurred,
                                                     * i.e. was originally created "at the source". Contains
                                                     * e.g. the interval time stamp of input values or aggregation
                                                     * time of the situation systems
                                                     * specification: intervalbegin */
    int32 interval_length = 4;                      // Recording interval length in seconds
    bool v_arithmetical = 5;                        // Speeds are arithmetically averaged
    int32 seq_number = 6;                           /* 0 means: no preparation; >0 count of sequential preparation
                                                     * specification: 'lfdNrErsetzung' */
    google.protobuf.Timestamp seq_begin = 7;        /* Timestamp: begin of sequential preparation. 
                                                     * null=no preparation. Specification: 'ersetzungsbeginn' */
    int32 q_KFZ = 8;                                // Vehicle volume pro hour
    int32 q_PKW = 9;                                // Passenger cars volume pro hour
    int32 q_LKW = 10;                               // Heavy vehicle (truck) volume pro hour
    int32 a_LKW = 11;								// percentage of trucks							
    int32 density = 12;								// traffic density
    int32 q_B = 13;									// measurement traffic volume
    int32 v_KFZ = 14;                               // Average speed of all vehicles
    int32 v_PKW = 15;                               // Average speed of passenger cars
    int32 v_LKW = 16;                               // Average speed of heavy vehicle
    float t_Netto = 17;                             // Gap time between vehicles
    int32 b_KFZ = 18;                               // Vehicle occupancy rate in %
    int32 s = 19;                                   // Variance of speeds
    int32 v_KFZ_smoothed = 20;                      // Exponential smoothed mean value (vehicle volume)
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState q_KFZ_state = 21;             // State after value preparation of qKFZ
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState q_PKW_state = 22;             // State after value preparation of qPKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState q_LKW_state = 23;             // State after value preparation of qLKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState a_LKW_state = 24;	            // State after value preparation of aLKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState density_state = 25;           // State after value preparation of density
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState q_B_state = 26;               // State after value preparation of qB
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState v_KFZ_state = 27;             // State after value preparation of vKFZ
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState v_PKW_state = 28;             // State after value preparation of vPKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState v_LKW_state = 29;	            // State after value preparation of vLKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState t_Netto_state = 30;           // State after value preparation of tNetto
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState b_state = 31;                 // State after value preparation of b
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState s_state = 32;                 // State after value preparation of s
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState v_KFZ_smoothed_state = 33;    // State after value preparation of vKfzSmoothed
    int32 q_KFZ_quality = 34;                       // Quality in percent  (specification:  'Guete')
    int32 q_PKW_quality = 35;                       // Quality in percent  (specification:  'Guete')
    int32 q_LKW_quality = 36;                       // Quality in percent  (specification:  'Guete')
    int32 v_KFZ_quality = 37;                       // Quality in percent  (specification:  'Guete')
    int32 v_PKW_quality = 38;                       // Quality in percent  (specification:  'Guete')
    int32 v_LKW_quality = 39;                       // Quality in percent  (specification:  'Guete')
    int32 t_Netto_quality = 40;                     // Quality in percent  (specification:  'Guete')
    int32 b_quality = 41;                           // Quality in percent  (specification:  'Guete')
    int32 s_quality = 42;                           // Quality in percent  (specification:  'Guete')
    int32 v_KFZ_smoothed_quality = 43;              // Quality in percent  (specification:  'Guete')
    int32 a_LKW_quality = 44;						// Quality in percent  (specification:  'Guete')							
    int32 density_quality = 45;						// Quality in percent  (specification:  'Guete')
    int32 q_B_quality = 46;							// Quality in percent  (specification:  'Guete')
}

/* Short-term measurement preparation to analyze data of an detection site . (output) */
message AnalyticalDataDetSite {
    string id = 1;                                  // Identification of detection site
    google.protobuf.Timestamp processing_time = 2;  /* Processing time - The point in time when the event or data
                                                     * record happens to be processed by the stream processing 
                                                     * application, i.e. when the record is being consumed. The 
                                                     * processing time may be milliseconds, hours, or days etc. later
                                                     * than the original event time This is something like setting a 
                                                     * system_time from the database in old.
                                                     * specification: 'systemzeit' */
    google.protobuf.Timestamp event_time = 3;       /* The point in time when an event or data record occurred,
                                                     * i.e. was originally created "at the source". Contains
                                                     * e.g. the interval time stamp of input values or aggregation
                                                     * time of the situation systems
                                                     * specification: intervalbegin */
    int32 interval_length = 4;                      // Recording interval length in seconds
    int32 Q_KFZ = 5;                                // Vehicle volume pro hour
    int32 Q_PKW = 6;                                // Passenger cars volume pro hour
    int32 Q_LKW = 7;                                // Heavy vehicle (truck) volume pro hour
    int32 A_LKW = 8;								// percentage of trucks							
    int32 Density = 9;								// traffic density
    int32 Q_B = 10;									// measurement traffic volume
    int32 V_KFZ = 11;                               // Average speed of all vehicles
    int32 V_PKW = 12;                               // Average speed of passenger cars
    int32 V_LKW = 13;                               // Average speed of heavy vehicle
    int32 B = 14;                                   // Vehicle occupancy rate in %
    int32 B_Max = 15;                               // max Vehicle occupancy  rate in %
    int32 S = 16;                                   // Variance of speeds
    int32 S_Max = 17;                               // max Variance of speeds
    int32 S_Min = 18;                               // min Variance of speeds
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState Q_KFZ_state = 19;         // State after value preparation of qKFZ
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState Q_PKW_state = 20;         // State after value preparation of qPKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState Q_LKW_state = 21;         // State after value preparation of qLKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState A_LKW_state = 22;			// State after value preparation of aLKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState Density_state = 23;	  	// State after value preparation of density
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState Q_B_state = 24;	  		// State after value preparation of qB
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState V_KFZ_state = 25;         // State after value preparation of vKFZ
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState V_PKW_state = 26;			// State after value preparation of vPKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState V_LKW_state = 27;			// State after value preparation of vLKW
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState S_state = 28;				// State after value preparation of b
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState B_state = 29;				// State after value preparation of s
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState B_Max_state = 30;         // max Vehicle occupancy  rate in %
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState S_Max_state = 31;         // max Variance of speeds
    eu.vmis_ehe.vmis2.receiving.processing.data.repl.MeasurementReplState S_Min_state = 32;       
    int32 Q_KFZ_quality = 33;                       // Quality in percent  (specification:  'Guete')
    int32 Q_PKW_quality = 34;                       // Quality in percent  (specification:  'Guete')
    int32 Q_LKW_quality = 35;                       // Quality in percent  (specification:  'Guete')
    int32 V_KFZ_quality = 36;                       // Quality in percent  (specification:  'Guete')
    int32 V_PKW_quality = 37;                       // Quality in percent  (specification:  'Guete')
    int32 V_LKW_quality = 38;                       // Quality in percent  (specification:  'Guete')
    int32 B_quality = 39;                           // Quality in percent  (specification:  'Guete')
    int32 B_Max_quality = 40;                       // Quality in percent  (specification:  'Guete')
    int32 S_quality = 41;                           // Quality in percent  (specification:  'Guete')
    int32 S_Max_quality = 42;                       // Quality in percent  (specification:  'Guete')
    int32 S_Min_quality  = 43;                      // Quality in percent  (specification:  'Guete')
    int32 A_LKW_quality = 44;						// Quality in percent  (specification:  'Guete')							
    int32 Density_quality = 45;						// Quality in percent  (specification:  'Guete')
    int32 Q_B_quality = 46;							// Quality in percent  (specification:  'Guete')
}

/* List of AnalyticalDataLane used e.g. to publish AnalyticalDataLane-data to a broker etc. */
message AnalyticalDataLanes {
    repeated AnalyticalDataLane data = 1;
    string iid = 2;                     // message id
}

/* List of AnalyticalDataDetSite used e.g. to publish AnalyticalDataDetSites to a broker etc. */
message AnalyticalDataDetSites {
    repeated AnalyticalDataDetSite data = 1;
    string iid = 2;                     // message id
}
